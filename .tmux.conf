# Use C-s (control and s key at the same time) as the prefix key
unbind C-b
set -g prefix C-s
bind-key C-s send-prefix

# Reload tmux conf
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Navigate between panels using hjkl
bind-key -n C-h select-pane -L
bind-key -n C-j select-pane -D
bind-key -n C-k select-pane -U
bind-key -n C-l select-pane -R

# Status line styling
set -g default-terminal "screen-256color"
set -g status-bg "#aaaaaa"
set -g status-left-length 50
set -g status-right " #(date '+%a, %b %d - %I:%M') "

# Set the active pane's border colour
set-option -g pane-active-border-style fg="#adaeac"
set-option -g pane-active-border-style bg="#adaeac"

# Split a window using the more intuitive | and - keys
bind-key - split-window -v -c "#{pane_current_path}"
bind-key \ split-window -h -c "#{pane_current_path}"

# Open a new pane with the htop process attached to it
bind-key h split-window -h "htop"
bind-key s display-panes\; command-prompt -p "pane #: " "swap-pane -t '%%'"
# Open a new window with a rails server, jobs, and webpack-dev-server running
bind-key F new-window -c ~/dev/freeagent/ "bundle && devkit env start && bundle exec rails s"\; \
  split-window -h "bundle exec rake jobs:work"\; \
  split-window -v "bin/webpack-dev-server"

# Resize a panel using shift and an arrow key
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# New windows get created using the current path
bind c new-window -c "#{pane_current_path}"

# Indices start at 0 by default in tmux. It's a bit confusing so I'm using 1
set-option -g base-index 1
set-option -g pane-base-index 1
# Renumber windows when one is deleted (saves having window numbers 1, 2, 4)
set-option -g renumber-windows on
# Use zsh as the default shell
set-option -g default-shell /bin/zsh
# Break a pane out into its own window and don't give it focus
bind-key b break-pane -d
# List all sessions, windows, and panes
bind-key C-j choose-tree
bind-key j command-prompt -p "join page from: " "join-pane -h -s '%%'"
# Use vim keybindings in copy mode
setw     -g mode-keys    vi
bind-key -T edit-mode-vi Up                send-keys -X history-up
bind-key -T edit-mode-vi Down              send-keys -X history-down
bind-key -T copy-mode-vi v                 send      -X begin-selection
bind-key -T copy-mode-vi [                 send-keys -X begin-selection
bind-key -T copy-mode-vi y                 send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Enter             send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi ]                 send-keys -X copy-selection

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l
